{"version":3,"sources":["components/Header.js","components/Formulary.js","components/Error.js","components/Weather.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","Formulary","cityRef","React","createRef","countryRef","searchWeather","e","preventDefault","response","city","_this","current","value","country","checkWeather","onSubmit","this","ref","id","type","htmlFor","defaultValue","Component","Error","mesage","Weather","showResult","_this$props$res","res","name","weather","main","urlIcono","concat","icon","alt","temp","toFixed","src","temp_max","temp_min","App","state","error","dataWeather","result","checkAPI","_this$state$dataWeath","url","fetch","then","json","data","setState","catch","console","log","prevProps","prevState","cod","components_Error","components_Weather","components_Header","components_Formulary","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b41bd25a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n    return(\n        <div>\n            <nav className=\"nav-wrapper light-blue darken-2\">\n                <a className=\"brand-logo\">{props.titulo}</a>\n            </nav>\n        </div>\n\n    );\n};\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Formulary extends Component {\n\n    //Creating the refs\n\n    cityRef = React.createRef();\n    countryRef = React.createRef();\n\n    searchWeather = (e) => {\n        \n        e.preventDefault();\n\n\n        //Read the refs and create the object\n\n        const response = {\n            city: this.cityRef.current.value,\n            country: this.countryRef.current.value\n        }\n\n\n        //send by props\n\n        this.props.checkWeather(response);\n\n        //Optional, reset the formulary\n\n\n    }\n\n    render(){\n        return (\n            <div className=\"contenedor-form\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <form onSubmit={this.searchWeather}>\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\n                                <input ref={this.cityRef} id=\"city\" type=\"text\"/>\n                                <label htmlFor=\"city\">City:</label>\n                            </div>\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\n                                <select ref={this.countryRef}>\n                                    <option value=\"\" defaultValue>Choose a Country</option>\n                                    <option value=\"CA\" defaultValue>Canada</option>\n                                    <option value=\"CO\" defaultValue>Colombia</option>\n                                    <option value=\"CR\" defaultValue>Costa Rica</option>\n                                    <option value=\"ES\" defaultValue>Espain</option>\n                                    <option value=\"US\" defaultValue>United States</option>\n                                    <option value=\"MX\" defaultValue>Mexico</option>\n                                    <option value=\"PE\" defaultValue>Per√π</option>\n                                </select>\n                                <label htmlFor=\"country\">Country:</label>\n                            </div>\n                            <div className=\"input-field col s12 m8 l4 offset-m2 buscador\">\n                                <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow accent-4\" value=\"Search...\"/>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default Formulary;","import React from 'react';\n\nconst Error = (props) => {\n    return(\n\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col s12 m6 offset-m3\">\n                    <div className=\"card-panel red darken-4 error\">\n                        {props.mesage}\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Error;","import React, { Component } from 'react';\n\nclass Weather extends Component{\n\n    showResult = () => {\n        //Get data from the query\n        const {name, weather, main} = this.props.res;\n\n        if(!name || !weather || !main) return null;\n\n        //we need to change kelvin degres to celcius\n        const kelvin = 273.15;\n\n        //Icons, we can find in the documentation \n        const urlIcono = `http://openweathermap.org/img/w/${weather[0].icon}.png`;\n        const alt = `clima de ${name}`;\n\n        return(\n            <div className=\"row\">\n                    <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\n                         <div className=\"card-panel light-blue align-center\">\n                              <span className=\"white-text\">\n                                   <h2>Weather Result for: {name}</h2>\n                                   <p className=\"temperatura\">\n                                       Current: { (main.temp - kelvin).toFixed(2) } &deg;C\n                                        <img src={urlIcono} alt={alt} />\n                                   </p>\n                                   <p> Max. {main.temp_max - kelvin} &deg;C</p>\n                                   <p> Min. {main.temp_min - kelvin} &deg;C</p>\n                                   \n                              </span>\n                         </div>    \n                    </div>\n               </div>\n        )\n\n    }\n   \n    render(){\n        return(\n            <div className=\"container\">\n               {this.showResult()}\n            </div>           \n        )\n    }\n}\n\nexport default Weather;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Formulary from './Formulary';\nimport Error from './Error';\nimport Weather from './Weather';\n\n\n\n\nclass App extends Component {\n\n  state = {\n    error:'',\n    dataWeather:{},\n    result:{}\n  }\n\n  componentDidMount(){\n    this.setState({\n      error:false\n    })\n  }\n\n  //When there are changes on my state\n  componentDidUpdate(prevProps, prevState){\n    \n    //Este if es para revisar si el state ya cambio, si es asi mandamos a llamar a la API\n    //Si no ponemos esta condicion componentDidUpdate siempre se esta actualizando (ciclo) no importa si realmente\n    //cambia el state...\n    if(prevState.dataWeather != this.state.dataWeather){\n      this.checkAPI();\n    }    \n  }\n\n  checkAPI=()=>{\n\n    \n    const {city, country} = this.state.dataWeather;\n    \n    //Read the URL and add the ApI Key\n    const appID = 'e5556cfcfe952fb14cc15760342c5eaf';\n    let url = `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${appID}`;\n\n    if(!city || !country) return null;\n\n    //Query with fetch API\n\n    //Working with promises and fetch\n    fetch(url)\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        this.setState({\n          result : data\n        })\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n  checkWeather = response => {\n\n    if(response.city === '' || response.country === '') {\n      this.setState({\n        error: true\n      })\n    } else {\n      this.setState({\n        dataWeather:response,\n        error : false\n      })\n    }\n  }\n  \n  render() {\n\n    const error = this.state.error,\n          {cod} = this.state.result;\n\n    let result;\n\n    if(error){\n      result=<Error mesage=\"Required fields\" />\n    }\n    else if(cod === \"404\"){\n      result=<Error mesage=\"City not found\" />\n    }\n    else{\n      result=<Weather res = {this.state.result}/>\n    }\n\n    return (\n      <div className=\"app\">\n        <Header titulo='Weather API'\n        />\n        <Formulary\n          checkWeather = {this.checkWeather}\n        />\n        {result}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}